#!/usr/bin/env python3
"""
PayPal Setup Script for IATM Conference Management Tool

This script helps you set up your PayPal credentials.
"""

import os
import sys

def create_env_file():
    """Create .env file with PayPal configuration"""
    
    print("🚀 Setting up PayPal integration for IATM Conference Management Tool")
    print("=" * 60)
    
    # Get PayPal credentials from user
    print("\n📋 Please provide your PayPal credentials:")
    print("(Get these from https://developer.paypal.com/)")
    
    client_id = input("PayPal Client ID: ").strip()
    client_secret = input("PayPal Client Secret: ").strip()
    
    # Ask for mode
    print("\n🌍 Choose PayPal mode:")
    print("1. Sandbox (for testing)")
    print("2. Live (for production)")
    
    mode_choice = input("Enter choice (1 or 2): ").strip()
    paypal_mode = "sandbox" if mode_choice == "1" else "live"
    
    # Create .env content
    env_content = f"""# PayPal Configuration
# Generated by setup_paypal.py
PAYPAL_CLIENT_ID={client_id}
PAYPAL_CLIENT_SECRET={client_secret}
PAYPAL_MODE={paypal_mode}

# Django Configuration
SECRET_KEY={os.urandom(32).hex()}
DEBUG=True
DATABASE_URL=sqlite:///db.sqlite3
"""
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print(f"\n✅ Successfully created .env file!")
        print(f"📁 File location: {os.path.abspath('.env')}")
        print(f"🔒 PayPal mode: {paypal_mode}")
        
        if paypal_mode == "sandbox":
            print("\n🧪 SANDBOX MODE: Use PayPal sandbox accounts for testing")
            print("   - Test buyer: sb-1234567890@business.example.com")
            print("   - Test seller: sb-1234567890@business.example.com")
        
        print("\n📖 Next steps:")
        print("1. Install python-dotenv: pip install python-dotenv")
        print("2. Add 'from dotenv import load_dotenv' to your settings.py")
        print("3. Add 'load_dotenv()' at the top of settings.py")
        print("4. Run migrations: python manage.py makemigrations && python manage.py migrate")
        print("5. Test the payment flow!")
        
    except Exception as e:
        print(f"\n❌ Error creating .env file: {e}")
        return False
    
    return True

def main():
    """Main function"""
    if os.path.exists('.env'):
        overwrite = input("\n⚠️  .env file already exists. Overwrite? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    success = create_env_file()
    if success:
        print("\n🎉 PayPal setup complete! You can now run your Django application.")
    else:
        print("\n💥 Setup failed. Please check the error messages above.")
        sys.exit(1)

if __name__ == "__main__":
    main()
